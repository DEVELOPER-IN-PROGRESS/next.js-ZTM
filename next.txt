just some of my random NOTEs regarding next.js 

in the pages/ directory every route name created from '/' will have the name of the .js file index.js being an exception . Even though Home component is 
exported out from index this still gets the default root . Back in react ecosystem we had to install react router and specify the routes separately , 
with next.js we have coomponent filename based routing .
_app.js is the main entry point to our App  we can add any component in this file and present it throughout the app .  
api/  directory allows you to write backend code alongside front end which is great for most part 
public/ directory is for storing the static files like images icons etc 
  styles/ directory contains the  global styles or the styles for individual component which is similar to the scoped styles present in vue 

Css modules are provided by next.js out of the box which will have .module.css file  which will be scoped to that particulAr component so we can use the same class 
over and over without affecting each other . Under the hood it works by generating dynamic class names to each component so there will be no naming conflict


Heading over to the 'head' component provided by nextjs which allows you to modify head part of every page within the page itself

Routing:: just like react-router uses the History API provided by the browser under the hood to make it more accessible for us . unlike the react router 
there are 3 ways of routing in next.js 
 1)index based : i.e  making a separate file for routing  .For this to happen the page must be a  React component and it should be exported by default 
 2) Nested route : routes within the index
 3) Dynamic routing : dynamically generated routes from a route  if we use [<any name>].js  file we have a dynamic route  


Link component : inorder to route to various pages we can use native <a> tag provided by the browser . when we use this however there will be a page refresh 
but with next Link component there is no page refresh however   <Link><a>text</a></Link>

Image component is an extension of <img> component with lots of features like image resizing according to viewport width .
The Head component used in _discover.js is different from what nextjs provides for us 
<link rel="preload" as="font" href="path" crossOrigin="anonymous" />

Next provides basically 3 types of rendering which are SSG(eg: blog posts) , SSR (eg: news feed) , ISR (eg: twitter feed) and CSR (old react way )
ISR provides the best of both world features and again  depending on our applicaton we need to decide whats best for us . 

Inorder to combine various classnames together we need to use a separate module named 'classnames'  
for the purpose of discover coffee project  we arre using a json file for all the data 
for using url properties for images we need to configure it inside a next.config file so that the framework is aware of this issue
For this coffee project we can use SSG by hosting it on CDN and by default next uses SSG  as we are not making any external APi requests 
next.config.js allows you to configure a lot of thing like .env variables (need to read a bit more on this )
wecan use getStaticProps for making requerst before page render , for purpose of this project we directly use json within the project itself

the asyn function getStaticProps is purely server side function which means that piece of function wont reach to the client side  so if we can to prefetch 
some data before it is passed to the client we can do it here . So no user can inspect and look into the code . in other words 
you are writing client and server side code onto same file 

getStaticPaths :: another server side function  for rendering dynamic paths on the build time and its important for the page to 
include getStaticProps in that same page 

if we try to pass an id which is not present and fallback as false we get 404 page

incase of fallback:true  it checks whether the data exists in the db if it does the page is cached in CDN so the next user can get it quicky 
if not it will resolve to an error

Foursquare api can give you details of places 
upsplash modules for a vareity of Js functions via upsplash   unsplash-js 
we need to call server side code in getStaticprops 
refer unspalsh API docs for more clarity 